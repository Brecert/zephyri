{"version":3,"file":"index.js","sources":["../dist-src/router.js","../dist-src/http-router.js"],"sourcesContent":["/**\r\n * Router provides an interface for creating complex routes that can be used in an use-case agnostic way\r\n */\r\n/**\r\n * @hidden\r\n */\r\nconst escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n/**\r\n * @hidden\r\n *\r\n * Replaces all matches in a string with a value provided by a callback\r\n */\r\nconst replaceAll = (string, regex, cb) => {\r\n    // make sure that string actually has a match\r\n    while (regex.test(string)) {\r\n        // guranteed because already tested\r\n        string.match(regex).slice(1).map(val => {\r\n            string = string.replace(regex, cb(val));\r\n        });\r\n    }\r\n    return string;\r\n};\r\n/**\r\n * Compiles a route to a `RegExp` pattern\r\n *\r\n * ```typescript\r\n * compileRoute('/user/:id')\r\n * // /^\\/user\\/(?<id>[,a-zA-Z0-9%_-]*)(\\?[a-zA-Z0-9%_=&-]*)?$/\r\n *\r\n * compileRoute('/@(\\\\w{1,16})/get/:id')\r\n * // /^\\/@(\\w{1,16})\\/get\\/(?<id>[,a-zA-Z0-9%_-]*)(\\?[a-zA-Z0-9%_=&-]*)?$/\r\n * ```\r\n */\r\nexport const compileRoute = (route) => {\r\n    const replaced = route\r\n        .replace('**', '__DOUBLE_WILDCARD__')\r\n        .replace('*', \"[,a-zA-Z0-9_-]*\")\r\n        .replace(\"__DOUBLE_WILDCARD__\", \"[,/a-zA-Z0-9_-]*\");\r\n    const withCaptures = replaceAll(replaced, /:([,a-zA-Z0-9_-]*)/, val => `(?<${escapeRegExp(val)}>[,a-zA-Z0-9%_-]*)`);\r\n    let fin = `^${withCaptures}(\\\\?[a-zA-Z0-9%_=&-]*)?$`;\r\n    return new RegExp(fin);\r\n};\r\n/**\r\n * A use-case agnostic router for holding and matching routes\r\n *\r\n * @typeparam T  Where T is the types of the values passed from [[runPath]] to the [[RouteHandler]]\r\n */\r\nexport class Router {\r\n    constructor() {\r\n        /**\r\n         * The list of routes\r\n         */\r\n        this.routes = [];\r\n    }\r\n    /**\r\n     * Find a route that matches the path, returns undefined if nothing is found\r\n     */\r\n    findRoute(path) {\r\n        // tests based on order added, the order the paths were added matters!\r\n        return this.routes.find(({ route, handler }) => route.test(path));\r\n    }\r\n    /**\r\n     * Adds a route to match when testing paths\r\n     *\r\n     * The route handler is the callback that is executed when the program\r\n     */\r\n    addRoute(route, handler) {\r\n        this.routes.push({ route: compileRoute(route), handler });\r\n    }\r\n    /**\r\n     * Find and run the route handler for the path if any matches are found\r\n     *\r\n     * Optionally data can be passed to the handler\r\n     */\r\n    runPath(path, ...data) {\r\n        const route = this.findRoute(path);\r\n        if (route) {\r\n            // guranteed because tested earlier\r\n            route.handler(route.route.exec(path).groups || {}, ...data);\r\n        }\r\n    }\r\n}\r\n","import { Router } from './router.js';\r\n/**\r\n * A router specifically meant for use with HTTP servers\r\n *\r\n * ```typescript\r\n * import * as http from 'http';\r\n * import { HTTPRouter, URLReq } from 'zephyri';\r\n *\r\n * // IncomingMessage does not always have url or method\r\n * type Request = http.IncomingMessage & URLReq\r\n * type Response = http.ServerResponse\r\n *\r\n * const router = new HTTPRouter<Request, Response>()\r\n *  .on('GET', '/:param', (req, res, params) => res.end(JSON.stringify(params)))\r\n *  .on('GET', '/user/:id', (req, res, params) => res.end(params.id))\r\n *  .on('GET', '**', (req, res) => res.end('404'));\r\n *\r\n * // We cast req as Request because we know `url` and `method` is on `http.Server` incoming requests\r\n * http\r\n *  .createServer((req, res) => router.lookup(req as Request, res))\r\n *  .listen(3000)\r\n *\r\n * ```\r\n *\r\n * @typeparam T  where T is the type of `req` in the context of `(req, res, params)` for [[HttpRouterHandler]]\r\n * @typeparam U  where U is the type of `res` in the context of `(req, res, params)` for [[HttpRouterHandler]]\r\n */\r\nexport class HTTPRouter {\r\n    constructor() {\r\n        /**\r\n         * The base router\r\n         */\r\n        this.router = new Router();\r\n    }\r\n    /**\r\n     * Lookup a path and see if one exists, if it exists then the corresponding handler to the match will be called\r\n     *\r\n     * ```\r\n     * router.lookup('/user/1')\r\n     * ```\r\n     */\r\n    lookup(req, res) {\r\n        this.router.runPath(req.url, req, res);\r\n    }\r\n    /**\r\n     * Add a listener with a handler that will be called if a lookup match is found\r\n     *\r\n     * ```\r\n     * router.on('GET', '/user/:id', (req, res, params) => {\r\n     *   res.end(JSON.stringify(params.id))\r\n     * })\r\n     * ```\r\n     */\r\n    on(method, path, handler) {\r\n        /** @todo move the match logic to some a function like `recognize` or something for potential future memoization */\r\n        this.router.addRoute(path, (params, req, res) => {\r\n            if (req.method === method) {\r\n                handler(req, res, params);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n}\r\n"],"names":["escapeRegExp","string","replace","replaceAll","regex","cb","test","match","slice","map","val","compileRoute","route","replaced","withCaptures","fin","RegExp","Router","constructor","routes","findRoute","path","find","handler","addRoute","push","runPath","data","exec","groups","HTTPRouter","router","lookup","req","res","url","on","method","params"],"mappings":";;;;AAAA;;;;;;;AAMA,MAAMA,YAAY,GAAIC,MAAD,IAAYA,MAAM,CAACC,OAAP,CAAe,qBAAf,EAAsC,MAAtC,CAAjC;;;;;;;;AAMA,MAAMC,UAAU,GAAG,CAACF,MAAD,EAASG,KAAT,EAAgBC,EAAhB,KAAuB;;SAE/BD,KAAK,CAACE,IAAN,CAAWL,MAAX,CAAP,EAA2B;;IAEvBA,MAAM,CAACM,KAAP,CAAaH,KAAb,EAAoBI,KAApB,CAA0B,CAA1B,EAA6BC,GAA7B,CAAiCC,GAAG,IAAI;MACpCT,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAeE,KAAf,EAAsBC,EAAE,CAACK,GAAD,CAAxB,CAAT;KADJ;;;SAIGT,MAAP;CARJ;;;;;;;;;;;;;;AAqBA,MAAaU,YAAY,GAAIC,KAAD,IAAW;QAC7BC,QAAQ,GAAGD,KAAK,CACjBV,OADY,CACJ,IADI,EACE,qBADF,EAEZA,OAFY,CAEJ,GAFI,EAEC,iBAFD,EAGZA,OAHY,CAGJ,qBAHI,EAGmB,kBAHnB,CAAjB;QAIMY,YAAY,GAAGX,UAAU,CAACU,QAAD,EAAW,oBAAX,EAAiCH,GAAG,IAAK,MAAKV,YAAY,CAACU,GAAD,CAAM,oBAAhE,CAA/B;MACIK,GAAG,GAAI,IAAGD,YAAa,0BAA3B;SACO,IAAIE,MAAJ,CAAWD,GAAX,CAAP;CAPG;;;;;;;AAcP,AAAO,MAAME,MAAN,CAAa;EAChBC,WAAW,GAAG;;;;SAILC,MAAL,GAAc,EAAd;;;;;;;EAKJC,SAAS,CAACC,IAAD,EAAO;;WAEL,KAAKF,MAAL,CAAYG,IAAZ,CAAiB,CAAC;MAAEV,KAAF;MAASW;KAAV,KAAwBX,KAAK,CAACN,IAAN,CAAWe,IAAX,CAAzC,CAAP;;;;;;;;;EAOJG,QAAQ,CAACZ,KAAD,EAAQW,OAAR,EAAiB;SAChBJ,MAAL,CAAYM,IAAZ,CAAiB;MAAEb,KAAK,EAAED,YAAY,CAACC,KAAD,CAArB;MAA8BW;KAA/C;;;;;;;;;EAOJG,OAAO,CAACL,IAAD,EAAO,GAAGM,IAAV,EAAgB;UACbf,KAAK,GAAG,KAAKQ,SAAL,CAAeC,IAAf,CAAd;;QACIT,KAAJ,EAAW;;MAEPA,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACA,KAAN,CAAYgB,IAAZ,CAAiBP,IAAjB,EAAuBQ,MAAvB,IAAiC,EAA/C,EAAmD,GAAGF,IAAtD;;;;;;AC7EZ;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,AAAO,MAAMG,UAAN,CAAiB;EACpBZ,WAAW,GAAG;;;;SAILa,MAAL,GAAc,IAAId,MAAJ,EAAd;;;;;;;;;;;EASJe,MAAM,CAACC,GAAD,EAAMC,GAAN,EAAW;SACRH,MAAL,CAAYL,OAAZ,CAAoBO,GAAG,CAACE,GAAxB,EAA6BF,GAA7B,EAAkCC,GAAlC;;;;;;;;;;;;;EAWJE,EAAE,CAACC,MAAD,EAAShB,IAAT,EAAeE,OAAf,EAAwB;;SAEjBQ,MAAL,CAAYP,QAAZ,CAAqBH,IAArB,EAA2B,CAACiB,MAAD,EAASL,GAAT,EAAcC,GAAd,KAAsB;UACzCD,GAAG,CAACI,MAAJ,KAAeA,MAAnB,EAA2B;QACvBd,OAAO,CAACU,GAAD,EAAMC,GAAN,EAAWI,MAAX,CAAP;;KAFR;WAKO,IAAP;;;;;;;;;"}